input {
    beats {
        port => "5044"
    }
}

filter {
     if "access" in [fileset][name] {
         grok {
           match => [ "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"]
           overwrite => [ "message" ]
         }
         mutate {
           convert => ["response", "integer"]
           convert => ["bytes", "integer"]
           convert => ["responsetime", "float"]
         }
         geoip {
           source => "[source][address]"
           target => "[nginx][access][geoip]"
           #add_tag => [ "nginx-geoip" ]
         }
         date {
           match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
           remove_field => [ "timestamp" ]
         }
        useragent {
          source => 'message'
        }
     }

     if "error" in [fileset][name] {

                mutate {
                    gsub => [ "message", "\r", "" ]
                }
                grok {
                    match => { message => ["%{IPORHOST:client_ip} - %{USER:remote_user} [%{HTTPDATE:@timestamp}] %{WORD:http_method} %{URIPATHPARAM:request_uri} HTTP/%{NUMBER:http_version} %{NUMBER:response_code} %{NUMBER:bytes_sent} (?:%{URI:referrer}|-) %{DATA:user_agent} %{DATA:error_message}"]}
                }
                date {
                    match => [ "timestamp" , "yyyy/MM/dd HH:mm:ss" ]
                    timezone => 'UTC'
                }
                geoip {
                     source => "[nginx][error][client_ip]"
                     target => "[nginx][error][geoip]"
                }
                mutate {
                     add_field => { "[fileset][name]" => "error"}
                }
     }

     if "/var/log/auth.log" in [log][file][path] {
        grok {


             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Server listening on %{IP:sshd_listen_ip} port %{NUMBER:sshd_listen_port}."] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Received signal %{NUMBER:sshd_signal}; terminating."] }

             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: error: connect_to %{IP:sshd_listen_ip} port %{NUMBER:sshd_listen_port}: failed."] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: error: channel_setup_fwd_listener: cannot listen to port: %{NUMBER:sshd_listen_port}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: error: bind: Address already in use"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: error: channel_setup_fwd_listener_tcpip: cannot listen to port: %{NUMBER:sshd_listen_port}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Timeout, client not responding."] }

             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: (?<sshd_result>Accepted) %{WORD:sshd_auth_type} for %{USERNAME:sshd_user} from %{IP:sshd_client_ip} port %{NUMBER:sshd_port} %{WORD:sshd_protocol}: %{GREEDYDATA:sshd_cipher}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Received disconnect from %{IP:sshd_client_ip} port %{NUMBER:sshd_port}:%{NUMBER:sshd_disconnect_code}: %{GREEDYDATA:sshd_disconnect_status}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Connection closed by %{IP:sshd_client_ip}$"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: pam_unix(sshd:session): session opened for user %{USERNAME:sshd_user} by (uid=d+)"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: pam_unix(sshd:session): session closed for user %{USERNAME:sshd_user}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: pam_systemd(sshd:session): Failed to release session: %{GREEDYDATA:sshd_disconnect_status}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: syslogin_perform_logout: logout() returned an error"] }

             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: (?<sshd_result>refused) connect from %{DATA:sshd_client_hostname} (%{IPORHOST:sshd_client_ip})"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: warning: %{DATA:sshd_tcpd_file}, line %{NUMBER}: can't verify hostname: getaddrinfo(%{DATA:sshd_paranoid_hostname}, %{DATA:sshd_sa_family}) failed"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: warning: %{DATA:sshd_tcpd_file}, line %{NUMBER}: host name/address mismatch: %{IPORHOST:sshd_client_ip} != %{HOSTNAME:sshd_paranoid_hostname}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: warning: %{DATA:sshd_tcpd_file}, line %{NUMBER}: host name/name mismatch: %{HOSTNAME:sshd_paranoid_hostname_1} != %{HOSTNAME:sshd_paranoid_hostname_2}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: warning: %{DATA:sshd_tcpd_file}, line %{NUMBER}: host name/name mismatch: reverse lookup results in non-FQDN %{HOSTNAME:sshd_paranoid_hostname}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: warning: can't get client address: Connection reset by peer"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Failed %{WORD:sshd_auth_type} for %{USERNAME:sshd_invalid_user} from %{IP:sshd_client_ip} port %{NUMBER:sshd_port} %{WORD:sshd_protocol}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Failed password for invalid user %{USERNAME:sshd_invalid_user} from %{IP:sshd_client_ip} port %{NUMBER:sshd_port} %{WORD:sshd_protocol}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Invalid users*%{USERNAME:sshd_invalid_user}? from %{IP:sshd_client_ip}"] }

             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Disconnected from %{IP:sshd_client_ip} port %{NUMBER:sshd_port}s*(?:[%{GREEDYDATA:sshd_privsep}]|)"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: (?:error: |)Received disconnect from %{IP:sshd_client_ip} port %{NUMBER:sshd_port}:%{NUMBER:sshd_disconnect_code}: %{GREEDYDATA:sshd_disconnect_status}? [%{GREEDYDATA:sshd_privsep}]"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: error: maximum authentication attempts exceeded for (?:invalid user |)%{USERNAME:sshd_invalid_user} from %{IP:sshd_client_ip} port %{NUMBER:sshd_port} %{WORD:sshd_protocol}s*(?:[%{GREEDYDATA:sshd_privsep}]|)"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Disconnecting: %{GREEDYDATA:sshd_disconnect_status} [%{GREEDYDATA:sshd_privsep}]"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: input_userauth_request: invalid user %{USERNAME:sshd_invalid_user}?s*(?:[%{GREEDYDATA:sshd_privsep}]|)"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Connection reset by %{IP:sshd_client_ip} port %{NUMBER:sshd_port}s*(?:[%{GREEDYDATA:sshd_privsep}]|)"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Connection closed by %{IP:sshd_client_ip} port %{NUMBER:sshd_port}s*(?:[%{GREEDYDATA:sshd_privsep}]|)"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: fatal: Unable to negotiate with %{IP:sshd_client_ip} port %{NUMBER:sshd_port}:s*%{GREEDYDATA:sshd_disconnect_status}? [%{GREEDYDATA:sshd_privsep}]"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: fatal: %{GREEDYDATA:sshd_fatal_status}: Connection from %{IP:sshd_client_ip} port %{NUMBER:sshd_port}:s*%{GREEDYDATA:sshd_disconnect_status}? [%{GREEDYDATA:sshd_privsep}]"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Bad packet length %{NUMBER:sshd_packet_length}. [%{GREEDYDATA:sshd_privsep}]"] }

             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Did not receive identification string from %{IP:sshd_client_ip}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Address %{IP:sshd_client_ip} maps to %{HOSTNAME:sshd_client_hostname}, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: reverse mapping checking getaddrinfo for %{HOSTNAME:sshd_client_hostname} [%{IP:sshd_client_ip}] failed - POSSIBLE BREAK-IN ATTEMPT!"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Disconnecting: Too many authentication failures for %{USERNAME:sshd_invalid_user}"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Corrupted MAC on input"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Disconnecting: Packet corrupt"] }
             match => { message =>["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:process.name}(?:\\[%{POSINT:process.pid:long}\\])?: Bad protocol version identification '%{GREEDYDATA}' from %{IP:sshd_client_ip}"] }
       }
     }
     if "/var/log/cron.log" in [log][file][path] {
       grok {
             match => { message => ["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:cron.logsource} %{PROG:cron.program}(?:\[%{POSINT:cron.pid}\])?: \(%{USER:cron.user}\) %{DATA:cron.action} \(%{GREEDYDATA:cron.message}\)"] }
       }
     }

     if "/var/log/user.log" in [log][file][path] {
            grok {
                  match => { message => ["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} %{DATA:user.logmessage}"] }
            }
     }

     if "/var/log/kern.log" in [log][file][path] {
            grok {
                  match => { message => ["%{TIMESTAMP_ISO8601:@timestamp} %{SYSLOGHOST:host.hostname} kernel: \\[%{DATA:kern.numbers}\\] %{GREEDYDATA:kern.logmessage}"] }
            }
     }

}

output {
  if "nginx" in [event][module] {
    elasticsearch {
      hosts => ["elasticsearch-master.thesrv.de:9200"]
      ssl_enabled => true
      index => "weblogs-%{+YYYY.MM.dd}"
      document_type => "nginx_logs"
    }
  } else {
    elasticsearch {
      hosts => ["elasticsearch-master.thesrv.de:9200"]
      ssl_enabled => true
      index => "{{ logstash.index_pattern }}"
      action => "create"
      template => "/usr/share/logstash/template/template.json"
      template_name => "logs-general"
    }
  }
  if "_grokparsefailure" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch-master.thesrv.de:9200"]
      ssl_enabled => true
      index => "grokparsefailures"
      action => "create"
      #template => "/usr/share/logstash/template/template.json"
      #template_name => "logs-general"
    }
    #file { "path" => "/usr/share/logstash/grok_failures.txt" }
  } elseif "_geoip_lookup_failure" in [tags] {
    #file { "path" => "/usr/share/logstash/geoip_lookup_failures.txt" }
    elasticsearch {
      hosts => ["elasticsearch-master.thesrv.de:9200"]
      ssl_enabled => true
      index => "geoiplookupfailures"
      action => "create"
      #template => "/usr/share/logstash/template/template.json"
      #template_name => "logs-general"
    }
  }
  #else {
  #  stdout { codec => rubydebug }
  #}
}





